@import "./../../assets/styles/variables.scss";

/*
----------- TOGGLES -----------

A toggle is an input of type "check" or "radio" that has had the native box
hidden and replaced with a custom-styled one of our own.

For accessibility reasons, we need to insure that there is a real (hidden) input
that is driving all of the states, which is why there's all this effort to make
all the selectors start from the input element.
*/

/*
Toggles can be re-themed to match certain colors (such as operator colors), and
use the following three css variables to determine color.

CSS variables are scoped by parents and determined at runtime. Here we place
the default colors in html so all children have access to them.
*/
html {
    --ride-report-inactive-toggle-color: #{$gray-70};
    --ride-report-active-toggle-color: #{$blue-50};
    --ride-report-hover-toggle-color: #{$blue-30};
}

/*
Fetching a nonexistent CSS variable won't throw any errors, which can make
debugging confusing. You can use these sass variables instead, which will
complain at compile-time if you make a typo.
*/
$inactive-toggle: var(--ride-report-inactive-toggle-color);
$active-toggle: var(--ride-report-active-toggle-color);
$hover-toggle: var(--ride-report-hover-toggle-color);

/*
There's one part of the toggle that works nearly consistently between all of,
them but that part might be the whole label itself, a div inside it, or
an :after element.

Giving a selector that describes how to find it starting from the input
(like ' + label' or ' + label > svg'), this will set that input up with all the
default styles, including for :focus, :hover, :checked, :disabled states.
*/
@mixin toggle-defaults($location-from-input) {
    position: absolute;
    opacity: 0;
    width: 0;
    margin: 0;
    padding: 0;
    overflow: hidden;
    & + label {
        @include text-body-link;
        display: flex;
        flex-flow: row nowrap;
        align-items: center;
        color: $gray-90;
        user-select: none;
        position: relative;
    }
    &#{$location-from-input} {
        transition: 150ms all;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4rem;
        background-color: $white;
        border: 1rem solid $inactive-toggle;
        font-size: 20rem;
        margin-right: 8rem;
    }
    &:not(:disabled) {
        &:hover,
        &:focus {
            &#{$location-from-input} {
                box-shadow: 0rem 0rem 4rem $hover-toggle;
            }
            &:not(:checked)#{$location-from-input} {
                border-color: $hover-toggle;
            }
        }
    }
    &:checked#{$location-from-input} {
        border-color: transparent;
        background-color: $active-toggle;
    }
    &:disabled#{$location-from-input} {
        border-color: transparent;
        background-color: $gray-30;
    }
}

.ride-ui-kit-toggle {
    @include toggle-defaults(' + label:before');
    & + label:before {
        content: '';
        width: 40rem;
        height: 24rem;
        border-radius: 64rem;
        margin-right: 0;
    }
    .ride-ui-kit-toggle-label {
        & + label:before {
            margin-right: 8rem;
            color: blue;
        }
        &:not(:checked) {
            & + label {
                color: $gray-70;
            }
        }
    }
    $knob-path: ' + label:after';
    &#{$knob-path} {
        content: '';
        height: 16rem;
        width: 16rem;
        position: absolute;
        border-radius: 32rem;
        left: 4rem;
        top: calc(50% - 8rem);
        background-color: $inactive-toggle;
        transition: 150ms all;
    }
    &:checked#{$knob-path} {
        left: 18rem;
        background-color: $white;
    }
    &:not(:disabled):not(:checked) {
        &:hover, &:focus {
            &#{$knob-path} {
                background-color: $hover-toggle;
            }
        }
    }
    &:disabled#{$knob-path} {
        background-color: $white;
    }
}


.ride-ui-kit-toggle-checkbox {
    $checkbox-path: ' + label > :first-child';

    @include toggle-defaults($checkbox-path);

    &#{$checkbox-path} {
        width: 20rem;
        height: 20rem;
        svg {
            color: white;
        }
    }

    &:not(:checked):disabled#{$checkbox-path} svg {
        color: transparent;
    }
}
.ride-ui-kit-toggle-checkbox-wrapper {
    position: relative;
}